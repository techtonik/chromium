// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mandoline;

import "network/public/interfaces/url_loader.mojom";

// This files defines the interfaces and structures used for frames.
//
// When a client in the frame tree is connected to by way of the ViewManager a
// FrameTreeClient is obtained (from the ServiceProvider interface request
// passed in ViewManager::OnEmbed()). The FrameTreeClient is told the frame
// tree (by way of OnConnection()), which allows the client to use other
// frames in the tree (assuming the client has the appropriate permissions).
//
// frame_ids are the same as views ids. This means that when a client creates
// a new view to be part of the frame tree it immediately knows the id to use
// for FrameTreeServer calls.
// TODO(sky): there are likely timing issues here, figure out how to resolve
// that.

// Expresses a preference for where a navigation will be performed.
enum NavigationTarget {
  // No preference
  DEFAULT,

  // In the same ViewManager node that the navigation was initiated
  SOURCE_NODE,

  // In a new ViewManager node
  NEW_NODE
};

// Provides information about a frame.
struct FrameData {
  // 0 if the frame has no parent (its the root).
  uint32 parent_id;
  uint32 frame_id;

  string? name;
  // TODO(sky): this is not being propagated correctly. It needs to be updated
  // along with deciding if we want to keep NavigatorHost.
  string origin;
  uint32 sandbox_flags;
};

struct MessageEvent {
  // TODO(sky): add details.
};

interface FrameTreeServer {
  // TODO(sky): make these real.
  PostMessageEventToFrame(uint32 frame_id, MessageEvent event);

  // Notifies the server that a load has started or stopped in this frame.
  // When loading is started, progress is reset to 0, but when loading is
  // stopped progress may not have reached 1.0.
  LoadingStarted(uint32 frame_id);
  LoadingStopped(uint32 frame_id);

  // Called when the progress for this frame changes. Will only be called while
  // a load is in progress.
  ProgressChanged(uint32 frame_id, double progress);

  SetFrameName(uint32 frame_id, string? name);

  // Called when the client creates a new frame. |frame_id| corresponds to
  // the id of the view hosting the frame, and |parent_id| the id of the
  // parent.
  OnCreatedFrame(uint32 parent_id, uint32 frame_id);

  // The specified frame is requesting a navigation.
  RequestNavigate(uint32 frame_id,
                  NavigationTarget target,
                  mojo.URLRequest request);

  // The frame navigated locally, for example, pushState() navigations in an
  // HTML application.
  DidNavigateLocally(uint32 frame_id, string url);
};

interface FrameTreeClient {
  // Called once per client. |frame_data| gives the contents of the tree.
  OnConnect(FrameTreeServer server, array<FrameData> frame_data);

  // Called when a new frame is added to the tree. This is not called on the
  // originator of the change.
  OnFrameAdded(FrameData frame_data);

  // Called when a frame is removed from the tree. This is not called on the
  // originator of the change.
  OnFrameRemoved(uint32 frame_id);

  // Called when the name of a frame changes. This is not called on the
  // originator of the change.
  OnFrameNameChanged(uint32 frame_id, string name);
};
