# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/crypto.gni")
import("//chromecast/chromecast.gni")

declare_args() {
  libcast_media_target = ""
}

source_set("message_loop") {
  sources = [
    "media_message_loop.cc",
    "media_message_loop.h",
    "video_plane_controller.cc",
    "video_plane_controller.h",
  ]

  public_deps = [
    "//chromecast/public/media",
  ]

  configs += [ "//chromecast:config" ]

  deps = [
    "//base",
    "//chromecast/media/base:libcast_media_1.0",
    "//chromecast/public",
  ]
}

source_set("key_systems") {
  sources = [
    "key_systems_common.cc",
    "key_systems_common.h",
  ]

  configs += [ "//chromecast:config" ]

  deps = [
    "//base",
    "//chromecast/public/media",
    "//media",
    "//third_party/widevine/cdm:version_h",
  ]
}

# TODO(slan): See if the dependency on //media can be broken.
source_set("base") {
  sources = [
    "decrypt_context_impl.cc",
    "decrypt_context_impl.h",
    "decrypt_context_impl_clearkey.cc",
    "decrypt_context_impl_clearkey.h",
    "media_caps.cc",
    "media_caps.h",
    "media_codec_support.cc",
    "media_codec_support.h",
    "switching_media_renderer.cc",
    "switching_media_renderer.h",
  ]

  public_deps = [
    ":key_systems",
    ":message_loop",
    "//chromecast/public/media",
  ]

  configs += [ "//chromecast:config" ]

  deps = [
    ":libcast_media_1.0",
    "//base",
    "//crypto",
    "//crypto:platform",
    "//media",
    "//net",
  ]

  if (chromecast_branding == "public") {
    sources += [ "key_systems_common_simple.cc" ]
  } else {
    deps += [ "//chromecast/internal/media/base" ]
  }
}

shared_library("libcast_media_1.0") {
  sources = [
    "cast_media_default.cc",
  ]

  configs += [ "//chromecast:config" ]

  public_deps = [
    "//chromecast/public",
    "//chromecast/public/media",
  ]

  deps = [
    "//build/config/sanitizers:deps",
    "//chromecast/media/cma/backend",
  ]
}
